/*
 * This file is generated by jOOQ.
 */
package gensrc.tables.daos;


import gensrc.tables.UserMaster;
import gensrc.tables.records.UserMasterRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMasterDao extends DAOImpl<UserMasterRecord, gensrc.tables.pojos.UserMaster, Integer> {

    /**
     * Create a new UserMasterDao without any configuration
     */
    public UserMasterDao() {
        super(UserMaster.USER_MASTER, gensrc.tables.pojos.UserMaster.class);
    }

    /**
     * Create a new UserMasterDao with an attached configuration
     */
    public UserMasterDao(Configuration configuration) {
        super(UserMaster.USER_MASTER, gensrc.tables.pojos.UserMaster.class, configuration);
    }

    @Override
    public Integer getId(gensrc.tables.pojos.UserMaster object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByUserId(Integer... values) {
        return fetch(UserMaster.USER_MASTER.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>USER_ID = value</code>
     */
    public gensrc.tables.pojos.UserMaster fetchOneByUserId(Integer value) {
        return fetchOne(UserMaster.USER_MASTER.USER_ID, value);
    }

    /**
     * Fetch records that have <code>FIRST_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>FIRST_NAME IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByFirstName(String... values) {
        return fetch(UserMaster.USER_MASTER.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>LAST_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LAST_NAME IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByLastName(String... values) {
        return fetch(UserMaster.USER_MASTER.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>USER_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_NAME IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByUserName(String... values) {
        return fetch(UserMaster.USER_MASTER.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>PASSWORD BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByPassword(String... values) {
        return fetch(UserMaster.USER_MASTER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>IS_DELETED BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfIsDeleted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_DELETED IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByIsDeleted(Boolean... values) {
        return fetch(UserMaster.USER_MASTER.IS_DELETED, values);
    }

    /**
     * Fetch records that have <code>CREATED_ON BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfCreatedOn(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_ON IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByCreatedOn(LocalDateTime... values) {
        return fetch(UserMaster.USER_MASTER.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>UPDATED_ON BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfUpdatedOn(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_ON IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByUpdatedOn(LocalDateTime... values) {
        return fetch(UserMaster.USER_MASTER.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>ROLE_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchRangeOfRoleId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserMaster.USER_MASTER.ROLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ROLE_ID IN (values)</code>
     */
    public List<gensrc.tables.pojos.UserMaster> fetchByRoleId(Integer... values) {
        return fetch(UserMaster.USER_MASTER.ROLE_ID, values);
    }
}
